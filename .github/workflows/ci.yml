name: CI

on:
  push:
    branches: [ main, develop, "feature/*" ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.7.1"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [bank-adapter, api-gateway]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: services/${{ matrix.service }}/.venv
          key: ${{ runner.os }}-poetry-${{ matrix.service }}-${{ hashFiles(format('services/{0}/poetry.lock', matrix.service)) }}

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run tests
        working-directory: services/${{ matrix.service }}
        run: |
          poetry run pytest --cov --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          fail_ci_if_error: false

  test-agents:
    name: Test Agents
    runs-on: ubuntu-latest
    strategy:
      matrix:
        agent: [transaction-classification, receipt-matching, financial-analysis]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: agents/${{ matrix.agent }}/.venv
          key: ${{ runner.os }}-poetry-${{ matrix.agent }}-${{ hashFiles(format('agents/{0}/poetry.lock', matrix.agent)) }}

      - name: Install dependencies
        working-directory: agents/${{ matrix.agent }}
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run tests
        working-directory: agents/${{ matrix.agent }}
        run: |
          poetry run pytest --cov --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: agents/${{ matrix.agent }}/coverage.xml
          flags: ${{ matrix.agent }}
          fail_ci_if_error: false

  test-shared:
    name: Test Shared Components
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: shared/.venv
          key: ${{ runner.os }}-poetry-shared-${{ hashFiles('shared/poetry.lock') }}

      - name: Install dependencies
        working-directory: shared
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run tests
        working-directory: shared
        run: |
          poetry run pytest --cov --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: shared/coverage.xml
          flags: shared
          fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build --parallel

      - name: Test Docker Compose
        run: |
          docker compose up -d
          sleep 30
          docker compose ps
          docker compose down